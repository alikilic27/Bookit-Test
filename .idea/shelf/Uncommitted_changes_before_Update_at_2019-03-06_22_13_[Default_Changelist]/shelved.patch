Index: src/test/java/com/cybertek/step_definitions/BackendTestStepDefinitions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cybertek.step_definitions;\n\nimport com.cybertek.pages.MyTeamPage;\nimport com.cybertek.utilities.BrowserUtils;\nimport com.cybertek.utilities.DatabaseUtility;\nimport cucumber.api.java.en.Then;\nimport org.junit.Assert;\n\nimport java.util.List;\n\npublic class BackendTestStepDefinitions {\n\n    @Then(\"team information should match database records\")\n    public void team_information_should_match_database_records() {\n        // get the name of the team, it will be used to get tem id\n        MyTeamPage myTeamPage = new MyTeamPage();\n        BrowserUtils.wait(3);\n        String teamName = myTeamPage.teamName.getText();\n        System.out.println(teamName);\n        // build the sql based on the team name\n        String sql = \"select u.firstname \" +\n                \" from users u join team t on t.id = \" +\n                \"u.team_id and t.name = '\"+teamName+\"';\";\n        // getColumnData returns data of a single column\n        List<Object> names = DatabaseUtility.getColumnData(sql, \"firstname\");\n\n        System.out.println(names);\n        // get the actual name\n        List<String> actualNames = BrowserUtils.getElementsText(myTeamPage.allNames);\n\n        Assert.assertEquals(names.size(), actualNames.size());\n        // make sure all names appear in the expected list\n        for (Object name : names) {\n            Assert.assertTrue(actualNames.contains(name.toString()));\n        }\n\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/cybertek/step_definitions/BackendTestStepDefinitions.java	(date 1551841511000)
+++ src/test/java/com/cybertek/step_definitions/BackendTestStepDefinitions.java	(date 1551926236000)
@@ -1,12 +1,16 @@
 package com.cybertek.step_definitions;
 
+import com.cybertek.pages.MySelfPage;
 import com.cybertek.pages.MyTeamPage;
 import com.cybertek.utilities.BrowserUtils;
 import com.cybertek.utilities.DatabaseUtility;
+import cucumber.api.java.en.Given;
 import cucumber.api.java.en.Then;
+import cucumber.api.java.en.When;
 import org.junit.Assert;
 
 import java.util.List;
+import java.util.Map;
 
 public class BackendTestStepDefinitions {
 
@@ -33,8 +37,65 @@
         for (Object name : names) {
             Assert.assertTrue(actualNames.contains(name.toString()));
         }
+    }
+
+    List<Object> clusterTable;
+    @Given("there is a list of clusters in the clusters table")
+    public void there_is_a_list_of_clusters_in_the_clusters_table() {
+       //get the list of id from the cluster table
+        String sql = "select id from cluster;";
+        clusterTable = DatabaseUtility.getColumnData(sql, "id");
+        System.out.println(clusterTable);
+    }
 
+    List<Object> roomTable;
+    @Given("all rooms have a clusters id in room table")
+    public void all_rooms_have_a_clusters_id_in_room_table() {
+       // get the list of cluster_id from the room table
+        String sql = "select * from room;";
+        roomTable = DatabaseUtility.getColumnData(sql, "cluster_id");
+        System.out.println(roomTable);
+    }
 
+    @Then("all the clusters ids must be from the clusters table")
+    public void all_the_clusters_ids_must_be_from_the_clusters_table() {
+      // compare
+        for (Object o :roomTable) {
+            Assert.assertTrue(clusterTable.contains(o));
+        }
     }
+
+    @Then("correct user information should be displayed for {string}")
+    public void correct_user_information_should_be_displayed_for(String email) {
+        String sql = "SELECT firstname, lastname, t.name " +
+                "FROM users u " +
+                "JOIN team t ON t.id =u.team_id "+
+                "WHERE email = '"+email+"';";
+        Map<String, Object> userInfo = DatabaseUtility.getRowMap(sql);
+
+        System.out.println(userInfo);
+        String eName = userInfo.get("firstname") + " " + userInfo.get("lastname");
+        String eTeam = userInfo.get("name").toString();
+        System.out.println(eName);
+        System.out.println(eTeam);
+
+        MySelfPage mySelfPage = new MySelfPage();
+
+        Assert.assertEquals(eName, mySelfPage.name.getText());
+        Assert.assertEquals(eTeam, mySelfPage.team.getText());
+    }
+
+    @When("user logs in any user")
+    public void user_logs_in_any_user() {
+       // get the size of the table
+        Long count = (Long) DatabaseUtility.getCellValue("select count (*) from users;");
+        System.out.println(count);
+        //generate random number in that scope
+        double rand = Math.random() * count + 1;
+        System.out.println(rand);
+
+    }
+
+
 
 }
Index: src/test/resources/features/team_info_back_end_test.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Feature: Team information back end\n  @wip @db\n  Scenario: Team members db test\n    Given user on the login page\n    When user logs in using \"mstacey8r@imdb.com\" and \"skylargiblin\"\n    When the user goes to the \"my team\" page\n    Then team information should match database records\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/resources/features/team_info_back_end_test.feature	(date 1551841511000)
+++ src/test/resources/features/team_info_back_end_test.feature	(date 1551924808000)
@@ -1,7 +1,27 @@
 Feature: Team information back end
-  @wip @db
+
   Scenario: Team members db test
     Given user on the login page
     When user logs in using "mstacey8r@imdb.com" and "skylargiblin"
     When the user goes to the "my team" page
     Then team information should match database records
+
+
+  Scenario: Verify rooms and clusters
+    Given there is a list of clusters in the clusters table
+    And all rooms have a clusters id in room table
+    Then all the clusters ids must be from the clusters table
+
+
+  Scenario: verify user information per database
+    Given user on the login page
+    When user logs in using "mstacey8r@imdb.com" and "skylargiblin"
+    When the user goes to the "my self" page
+    Then correct user information should be displayed for "mstacey8r@imdb.com"
+
+  @wip @db
+  Scenario:Verify any user login
+    Given user on the login page
+    When user logs in any user
+    Then homepage should be displayed
+
